import logging
from datetime import datetime

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from config import config
from database import db
from utils.keyboard_utils import create_rsvp_keyboard
from utils.message_utils import format_event_card_message

logger = logging.getLogger(__name__)


class CallbackHandlers:
    """Callback handlers for inline keyboard interactions"""

    def __init__(self, bot_instance):
        self.bot = bot_instance

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline keyboard callbacks"""
        query = update.callback_query
        await query.answer()

        logger.info(f"Callback received: {query.data} from user {query.from_user.id}")

        if query.data.startswith("register_"):
            await self.handle_registration(query)
        elif query.data.startswith("rsvp_"):
            await self.handle_rsvp_response(query)
        elif query.data.startswith("post_card_"):
            await self.handle_post_card_selection(query)
        elif query.data.startswith("view_stats_"):
            await self.handle_view_stats_selection(query)
        elif query.data.startswith("check_users_"):
            await self.handle_check_users_selection(query)
        elif query.data.startswith("admin_"):
            await self.handle_admin_callback(query)
        elif query.data.startswith("notify_event_"):
            await self.handle_notify_event_selection(query)
        elif query.data.startswith("create_"):
            await self.handle_event_creation_step(query)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞: {query.data}")

    async def handle_registration(self, query):
        """Handle event registration"""
        event_id = int(query.data.split("_")[1])
        user = query.from_user

        # Check if already registered
        if db.is_user_registered(event_id, user.id):
            await query.edit_message_text(
                "‚úÖ You're already registered for this event!"
            )
            return

        # Get event details
        event = db.get_event_by_id(event_id)
        if not event:
            await query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # Register user
        success = db.register_user_for_event(
            event_id, user.id, user.username, user.first_name
        )

        if success:
            await query.edit_message_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ '{event[0]}' {event[2]}!\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º."
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def handle_rsvp_response(self, query):
        """Handle RSVP responses"""
        parts = query.data.split("_")
        if len(parts) < 3:
            logger.warning(f"Invalid RSVP callback data: {query.data}")
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç RSVP.")
            return

        event_id = int(parts[1])
        response = parts[2]  # '–∏–¥—É' or '–Ω–µ –∏–¥—É'
        user = query.from_user

        # Get event details first
        event = db.get_event_by_id(event_id)
        if not event:
            await query.answer("‚ùå Event not found.")
            return

        # Set RSVP response
        action_message = db.set_rsvp_response(
            event_id, user.id, user.username, user.first_name, response
        )

        # Get updated RSVP statistics and responses
        stats = db.get_rsvp_stats(event_id)
        recent_responses = db.get_recent_rsvp_responses(event_id)

        # Update the message with current status
        title, description, event_date = event

        # Format event card message with updated stats
        message = f"üéâ *{title}*\n\n"
        if description:
            message += f"üìù {description}\n\n"
        message += f"üìÖ –î–∞—Ç–∞: {event_date}\n\n"

        # Add RSVP statistics
        message += f"üìä *RSVP –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        message += f"‚úÖ –∏–¥—É: {stats['–∏–¥—É']}\n"
        message += f"‚ùå –Ω–µ –∏–¥—É: {stats['–Ω–µ –∏–¥—É']}\n\n"

        # Add recent responses
        if recent_responses:
            message += "üë• *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã:*\n"
            for first_name, username, resp in recent_responses:
                name = first_name or "Unknown"
                emoji = "‚úÖ" if resp == "–∏–¥—É" else "‚ùå"
                message += f"{emoji} {name}: {resp}\n"
            message += "\n"

        message += "–û—Ç–º–µ—Ç—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:"

        # Create updated keyboard with current stats and user's current response
        reply_markup = create_rsvp_keyboard(event_id, user.id)

        # Update the message
        try:
            await query.edit_message_text(
                text=message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
            await query.answer(action_message)
        except Exception as e:
            logger.error(f"Error updating RSVP message: {e}")
            await query.answer(action_message)

    async def handle_post_card_selection(self, query):
        """Handle event selection for posting event card"""
        if not config.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        event_id = int(query.data.split("_")[2])
        event = db.get_event_by_id(event_id)

        if not event:
            await query.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.")
            return

        title, description, event_date = event

        # Create RSVP keyboard (no user_id for initial posting)
        reply_markup = create_rsvp_keyboard(event_id)

        # Get current RSVP statistics for message
        stats = db.get_rsvp_stats(event_id)

        # Format event card message with initial stats
        message = f"üéâ *{title}*\n\n"
        if description:
            message += f"üìù {description}\n\n"
        message += f"üìÖ –î–∞—Ç–∞: {event_date}\n\n"

        # Add RSVP statistics
        message += f"üìä *RSVP –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        message += f"‚úÖ –∏–¥—É: {stats['–∏–¥—É']}\n"
        message += f"‚ùå –Ω–µ –∏–¥—É: {stats['–Ω–µ –∏–¥—É']}\n\n"

        message += "–û—Ç–º–µ—Ç—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:"

        # Post the event card in the chat
        await query.message.reply_text(
            text=message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )

        await query.answer("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")

    async def handle_view_stats_selection(self, query):
        """Handle event selection for viewing RSVP statistics"""
        if not config.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        event_id = int(query.data.split("_")[2])
        event = db.get_event_by_id(event_id)

        if not event:
            await query.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        stats = db.get_rsvp_stats(event_id)

        text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RSVP –¥–ª—è '{event[0]}'*\nüìÖ –î–∞—Ç–∞: {event[2]}\n\n"
        text += f"‚úÖ –∏–¥—É: {stats['–∏–¥—É']}\n‚ùå –Ω–µ –∏–¥—É: {stats['–Ω–µ –∏–¥—É']}\n\n"
        text += "–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: " + str(stats["–∏–¥—É"] + stats["–Ω–µ –∏–¥—É"])

        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN)

    async def handle_check_users_selection(self, query):
        """Handle event selection for checking user status"""
        if not config.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        event_id = int(query.data.split("_")[2])
        event = db.get_event_by_id(event_id)

        if not event:
            await query.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # Get all registered users for this event
        user_ids = db.get_registered_users_for_event(event_id)

        if not user_ids:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
            )
            return

        # Test sending a message to each user
        test_message = (
            "üîç –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
        )
        reachable_users = []
        unreachable_users = []

        for user_id in user_ids:
            try:
                await self.bot.application.bot.send_message(
                    chat_id=user_id, text=test_message
                )
                reachable_users.append((user_id, None, None))
            except Exception as e:
                error_msg = str(e)
                if "bot can't initiate conversation" in error_msg.lower():
                    unreachable_users.append((user_id, None, None))

        # Create status report
        from utils.message_utils import format_user_status_report

        report = format_user_status_report(
            event[0], event[2], reachable_users, unreachable_users
        )

        await query.edit_message_text(report, parse_mode=ParseMode.MARKDOWN)

    async def handle_admin_callback(self, query):
        """Handle admin callbacks"""
        from handlers.admin_handlers import AdminHandlers

        admin_handlers = AdminHandlers(self.bot)
        await admin_handlers.handle_admin_callback(query)

    async def handle_notify_event_selection(self, query):
        """Handle event selection for notifications"""
        if not config.is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        # Extract event_id from callback data
        event_id = int(query.data.split("_")[2])

        # Store the selected event_id for the notification
        user_id = query.from_user.id
        if user_id not in self.bot.user_data:
            self.bot.user_data[user_id] = {}

        self.bot.user_data[user_id]["notify_event_id"] = event_id
        self.bot.user_data[user_id]["waiting_for"] = "notification_message"
        self.bot.user_data[user_id]["creating_notification"] = True

        # Get event details
        event = db.get_event_by_id(event_id)

        if not event:
            await query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        from utils.keyboard_utils import create_back_to_admin_keyboard

        await query.edit_message_text(
            f"üì¢ *–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n"
            f"üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event[0]}\n"
            f"üìÖ –î–∞—Ç–∞: {event[2]}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
            f'üí° –ü—Ä–∏–º–µ—Ä: "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å –Ω–æ—É—Ç–±—É–∫!"\n\n'
            f"–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=create_back_to_admin_keyboard(),
        )

    async def handle_event_creation_step(self, query):
        """Handle individual steps of event creation"""
        user_id = query.from_user.id

        # Check if user is admin
        if not config.is_admin(user_id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        # Initialize user_data if it doesn't exist
        if user_id not in self.bot.user_data:
            self.bot.user_data[user_id] = {}

        logger.info(f"Event creation step: {query.data} for user {user_id}")

        if query.data == "create_title":
            logger.info(f"Setting up title input for user {user_id}")
            self.bot.user_data[user_id]["creating_event"] = True
            self.bot.user_data[user_id]["waiting_for"] = "title"
            logger.info(f"User data for {user_id}: {self.bot.user_data[user_id]}")
            await query.edit_message_text(
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n\n"
                "–ü—Ä–∏–º–µ—Ä: –ö–æ–º–∞–Ω–¥–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞\n\n"
                "üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )

        elif query.data == "create_date":
            self.bot.user_data[user_id]["creating_event"] = True
            self.bot.user_data[user_id]["waiting_for"] = "date"
            await query.edit_message_text(
                "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.\n\n"
                "–ü—Ä–∏–º–µ—Ä: 2024-12-25\n\n"
                "üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )

        elif query.data == "create_description":
            self.bot.user_data[user_id]["creating_event"] = True
            self.bot.user_data[user_id]["waiting_for"] = "description"
            await query.edit_message_text(
                "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
                "–ü—Ä–∏–º–µ—Ä: –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã\n\n"
                "üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )

        elif query.data == "create_final":
            await self.create_event_from_dialogue(query)
        elif query.data == "create_clear":
            await self.clear_event_creation_data(query)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {query.data}")
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def create_event_from_dialogue(self, query):
        """Create event using the dialogue data"""
        user_id = query.from_user.id

        # Get stored event data
        user_data = self.bot.user_data.get(user_id, {})

        title = user_data.get("event_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        event_date = user_data.get("event_date", datetime.now().strftime("%Y-%m-%d"))
        description = user_data.get("event_description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")

        # Validate that we have at least a title
        if not title or title == "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è":
            await query.edit_message_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è."
            )
            return

        try:
            event_id = db.create_event(title, description, event_date)

            # Clear the creation data
            if user_id in self.bot.user_data:
                self.bot.user_data[user_id].clear()

            await query.edit_message_text(
                f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
                f"üìÖ –î–∞—Ç–∞: {event_date}\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                f"ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_id}"
            )

        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {str(e)}")

    async def clear_event_creation_data(self, query):
        """Clear event creation data for user"""
        user_id = query.from_user.id

        if user_id in self.bot.user_data:
            self.bot.user_data[user_id].clear()

        await query.edit_message_text(
            "üóëÔ∏è –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—á–∏—â–µ–Ω—ã!\n\n"
            "–í—Å–µ –ø–æ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
        )
