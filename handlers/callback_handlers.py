import logging
from datetime import datetime

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from config import config
from database import db
from utils.keyboard_utils import (
    create_event_creation_keyboard,
    create_event_edit_keyboard,
    create_rsvp_keyboard,
)
from utils.message_utils import (
    escape_markdown,
    format_event_card_message,
    format_event_creation_status,
    format_event_edit_status,
)

logger = logging.getLogger(__name__)


class CallbackHandlers:
    """Callback handlers for inline keyboard interactions"""

    def __init__(self, bot_instance):
        self.bot = bot_instance

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline keyboard callbacks"""
        query = update.callback_query
        await query.answer()

        logger.info(f"Callback received: {query.data} from user {query.from_user.id}")

        if query.data.startswith("register_"):
            await self.handle_registration(query)
        elif query.data.startswith("rsvp_"):
            await self.handle_rsvp_response(query)
        elif query.data.startswith("post_card_"):
            await self.handle_post_card_selection(query)
        elif query.data.startswith("save_and_post_"):
            await self.handle_save_and_post(query)
        elif query.data.startswith("post_without_save_"):
            await self.handle_post_without_save(query)
        elif query.data.startswith("view_stats_"):
            await self.handle_view_stats_selection(query)
        elif query.data.startswith("check_users_"):
            await self.handle_check_users_selection(query)
        elif query.data.startswith("edit_event_"):
            await self.handle_edit_event_selection(query)
        elif query.data.startswith("admin_"):
            await self.handle_admin_callback(query)
        elif query.data.startswith("notify_event_"):
            await self.handle_notify_event_selection(query)
        elif query.data.startswith("create_"):
            await self.handle_event_creation_step(query)
        elif query.data.startswith("edit_"):
            await self.handle_event_edit_step(query)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞: {query.data}")

    async def handle_registration(self, query):
        """Handle event registration"""
        event_id = int(query.data.split("_")[1])
        user = query.from_user

        # Check if already registered
        if db.is_user_registered(event_id, user.id):
            await query.edit_message_text(
                "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!"
            )
            return

        # Get event details
        event = db.get_event_by_id(event_id)
        if not event:
            await query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        title, description, event_date, attendee_limit, _ = event

        # Check if event is at capacity
        if db.is_event_at_capacity(event_id):
            await query.edit_message_text(
                f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{title}' —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.\n"
                f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({attendee_limit})."
            )
            return

        # Register user
        success = db.register_user_for_event(
            event_id, user.id, user.username, user.first_name
        )

        if success:
            # Get updated registration count
            current_count = db.get_registration_count(event_id)
            limit_text = f" (—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {current_count}"
            if attendee_limit:
                limit_text += f"/{attendee_limit}"
            limit_text += ")"

            from utils.keyboard_utils import create_back_to_admin_keyboard

            await query.edit_message_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ '{title}' {event_date}!\n"
                f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º.{limit_text}",
                reply_markup=create_back_to_admin_keyboard(),
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def handle_rsvp_response(self, query):
        """Handle RSVP responses"""
        parts = query.data.split("_")
        if len(parts) < 3:
            logger.warning(f"Invalid RSVP callback data: {query.data}")
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç RSVP.")
            return

        event_id = int(parts[1])
        response = parts[2]  # '–∏–¥—É' or '–Ω–µ –∏–¥—É'
        user = query.from_user

        # Get event details first
        event = db.get_event_by_id(event_id)
        if not event:
            await query.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        title, description, event_date, attendee_limit, _ = event

        # Check if event is at capacity (only for positive responses)
        if response == "–∏–¥—É" and not db.is_user_registered(event_id, user.id):
            if db.is_event_at_capacity(event_id):
                await query.answer(
                    f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{title}' —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ. "
                    f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({attendee_limit})."
                )
                return

        # Set RSVP response
        action_message = db.set_rsvp_response(
            event_id, user.id, user.username, user.first_name, response
        )

        # Update the message with current status

        # Format event card message
        from utils.message_utils import format_event_card_message

        message = format_event_card_message(
            event_id, title, description, event_date, attendee_limit
        )

        # Create updated keyboard with current stats and user's current response
        reply_markup = create_rsvp_keyboard(event_id, user.id)

        # Update the message
        try:
            # Check if the original message has a photo (was sent with reply_photo)
            if query.message.photo:
                # Edit caption for photo messages
                await query.edit_message_caption(
                    caption=message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup,
                )
            else:
                # Edit text for regular text messages
                await query.edit_message_text(
                    text=message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup,
                )
            await query.answer(action_message)
        except Exception as e:
            logger.error(f"Error updating RSVP message: {e}")
            await query.answer(action_message)

    async def handle_post_card_selection(self, query):
        """Handle event selection for posting event card"""
        if not config.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        event_id = int(query.data.split("_")[2])
        user_id = query.from_user.id

        # Check if user has unsaved changes for this event
        if await self._has_unsaved_changes(user_id, event_id):
            await self._handle_unsaved_changes_warning(query, event_id)
            return

        await self._post_event_card(query, event_id)

    async def _has_unsaved_changes(self, user_id: int, event_id: int) -> bool:
        """Check if user has unsaved changes for the specified event"""
        if user_id not in self.bot.user_data:
            return False

        user_data = self.bot.user_data[user_id]

        # Check if user is currently editing this event
        if (
            user_data.get("editing_event")
            and user_data.get("editing_event_id") == event_id
        ):

            # Check if there are any pending changes
            pending_changes = [
                user_data.get("event_title"),
                user_data.get("event_date"),
                user_data.get("event_description"),
                user_data.get("attendee_limit"),
                user_data.get("event_image_file_id"),
            ]

            return any(change is not None for change in pending_changes)

        return False

    async def _handle_unsaved_changes_warning(self, query, event_id: int):
        """Handle case where user has unsaved changes"""
        from utils.keyboard_utils import create_confirmation_keyboard

        warning_message = (
            "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ: –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è*\n\n"
            "–í—ã –≤–Ω–µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∏—Ö.\n"
            "–ö–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π?"
        )

        # Create keyboard with save and proceed options
        reply_markup = create_confirmation_keyboard(
            confirm_callback=f"save_and_post_{event_id}",
            cancel_callback=f"post_without_save_{event_id}",
            confirm_text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å",
            cancel_text="üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        )

        await query.edit_message_text(
            warning_message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )

    async def _post_event_card(self, query, event_id: int):
        """Post the event card to the configured channel"""
        # Check if channel is configured
        if not config.CHANNEL_ID:
            await query.answer(
                "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è CHANNEL_ID."
            )
            return

        event = db.get_event_by_id(event_id)

        if not event:
            await query.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.")
            return

        title, description, event_date, attendee_limit, _ = event
        image_file_id = event[4] if len(event) > 4 else None

        # Create RSVP keyboard (no user_id for initial posting)
        reply_markup = create_rsvp_keyboard(event_id)

        # Format event card message with initial stats
        from utils.message_utils import format_event_card_message

        message = format_event_card_message(
            event_id, title, description, event_date, attendee_limit
        )

        try:
            # Post to the configured channel
            if image_file_id:
                await self.bot.application.bot.send_photo(
                    chat_id=config.CHANNEL_ID,
                    photo=image_file_id,
                    caption=message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup,
                )
            else:
                await self.bot.application.bot.send_message(
                    chat_id=config.CHANNEL_ID,
                    text=message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup,
                )

            await query.answer(
                f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '{title}' –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!"
            )

        except Exception as e:
            logger.error(
                f"Failed to post event card to channel {config.CHANNEL_ID}: {e}"
            )
            error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª. "

            if "chat not found" in str(e).lower():
                error_message += f"–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {config.CHANNEL_ID}). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_channel –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."
            elif "not enough rights" in str(e).lower() or "forbidden" in str(e).lower():
                error_message += (
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞."
                )
            else:
                error_message += (
                    f"–î–µ—Ç–∞–ª–∏: {str(e)}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_channel –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."
                )

            await query.answer(error_message)

    async def handle_save_and_post(self, query):
        """Handle saving changes and then posting the event card"""
        if not config.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        event_id = int(query.data.split("_")[3])  # save_and_post_{event_id}
        user_id = query.from_user.id

        # First save the changes
        success = self._save_event_changes(user_id, event_id)

        if success:
            # Then post the card with the updated data
            await self._post_event_card(query, event_id)
            # Clear the edit data after successful save and post
            if user_id in self.bot.user_data:
                self.bot.user_data[user_id].clear()
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

    async def handle_post_without_save(self, query):
        """Handle posting the event card without saving changes"""
        if not config.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        event_id = int(query.data.split("_")[3])  # post_without_save_{event_id}

        # Post the card with current database data (without saving changes)
        await self._post_event_card(query, event_id)

        # Clear the edit data without saving
        user_id = query.from_user.id
        if user_id in self.bot.user_data:
            self.bot.user_data[user_id].clear()

    def _save_event_changes(self, user_id: int, event_id: int) -> bool:
        """Save event changes to database"""
        if user_id not in self.bot.user_data:
            logger.warning(f"User {user_id} not found in bot.user_data")
            return False

        user_data = self.bot.user_data[user_id]
        logger.info(f"Saving changes for user {user_id}, event {event_id}")
        logger.info(f"User data keys: {list(user_data.keys())}")

        if (
            not user_data.get("editing_event")
            or user_data.get("editing_event_id") != event_id
        ):
            logger.warning(f"User {user_id} is not editing event {event_id}")
            return False

        # Get the changes (only non-None values)
        title = user_data.get("event_title")
        event_date = user_data.get("event_date")
        description = user_data.get("event_description")
        attendee_limit = user_data.get("attendee_limit")
        image_file_id = user_data.get("event_image_file_id")

        # Check if there are any changes to save
        changes = {
            "title": title,
            "event_date": event_date,
            "description": description,
            "attendee_limit": attendee_limit,
            "image_file_id": image_file_id,
        }
        actual_changes = {k: v for k, v in changes.items() if v is not None}

        if not actual_changes:
            logger.warning(f"No changes to save for user {user_id}, event {event_id}")
            return False

        logger.info(f"Saving changes: {actual_changes}")

        # Update event in database
        success = db.update_event(
            event_id=event_id,
            title=title,
            description=description,
            event_date=event_date,
            attendee_limit=attendee_limit,
            image_file_id=image_file_id,
        )

        if success:
            logger.info(f"Successfully saved changes for event {event_id}")
        else:
            logger.error(f"Failed to save changes for event {event_id}")

        return success

    async def handle_view_stats_selection(self, query):
        """Handle event selection for viewing RSVP statistics"""
        if not config.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        event_id = int(query.data.split("_")[2])
        event = db.get_event_by_id(event_id)

        if not event:
            await query.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        stats = db.get_rsvp_stats(event_id)
        attending_users = db.get_attending_users(event_id)

        text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RSVP –¥–ª—è '{event[0]}'*\nüìÖ –î–∞—Ç–∞: {event[2]}\n\n"
        text += f"‚úÖ –∏–¥—É: {stats['–∏–¥—É']}\n‚ùå –Ω–µ –∏–¥—É: {stats['–Ω–µ –∏–¥—É']}\n\n"
        text += "–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: " + str(stats["–∏–¥—É"] + stats["–Ω–µ –∏–¥—É"])

        if attending_users:
            text += f"\n\nüë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏:*\n"
            # Format users with clear indication of contactability
            user_list = []

            for first_name, username, user_id in attending_users:
                display_name = escape_markdown(first_name)
                if username:
                    # Users with usernames can be contacted directly
                    user_list.append(f"[{display_name}](https://t.me/{username})")
                else:
                    # Users without usernames cannot be contacted until they start conversation with bot
                    user_list.append(f"{display_name} (ID: {user_id})")

            text += "\n".join(user_list)
            text += f"\n\nüìù *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ username –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å /start –±–æ—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        else:
            text += f"\n\nüë• *–£—á–∞—Å—Ç–Ω–∏–∫–∏:*\n–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —É—á–∞—Å—Ç–∏—è"

        from utils.keyboard_utils import create_back_to_admin_keyboard

        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=create_back_to_admin_keyboard(),
        )

    async def handle_check_users_selection(self, query):
        """Handle event selection for checking user status"""
        if not config.is_admin(query.from_user.id):
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        event_id = int(query.data.split("_")[2])
        event = db.get_event_by_id(event_id)

        if not event:
            await query.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # Get all registered users for this event
        user_ids = db.get_registered_users_for_event(event_id)

        if not user_ids:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
            )
            return

        # Test sending a message to each user
        test_message = (
            "üîç –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
        )
        reachable_users = []
        unreachable_users = []

        for user_id in user_ids:
            try:
                await self.bot.application.bot.send_message(
                    chat_id=user_id, text=test_message
                )
                reachable_users.append((user_id, None, None))
            except Exception as e:
                error_msg = str(e)
                if "bot can't initiate conversation" in error_msg.lower():
                    unreachable_users.append((user_id, None, None))

        # Create status report
        from utils.message_utils import format_user_status_report

        report = format_user_status_report(
            event[0], event[2], reachable_users, unreachable_users
        )

        from utils.keyboard_utils import create_back_to_admin_keyboard

        await query.edit_message_text(
            report,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=create_back_to_admin_keyboard(),
        )

    async def handle_admin_callback(self, query):
        """Handle admin callbacks"""
        from handlers.admin_handlers import AdminHandlers

        admin_handlers = AdminHandlers(self.bot)
        await admin_handlers.handle_admin_callback(query)

    async def handle_notify_event_selection(self, query):
        """Handle event selection for notifications"""
        if not config.is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        # Extract event_id from callback data
        event_id = int(query.data.split("_")[2])

        # Store the selected event_id for the notification
        user_id = query.from_user.id
        if user_id not in self.bot.user_data:
            self.bot.user_data[user_id] = {}

        self.bot.user_data[user_id]["notify_event_id"] = event_id
        self.bot.user_data[user_id]["waiting_for"] = "notification_message"
        self.bot.user_data[user_id]["creating_notification"] = True

        # Get event details
        event = db.get_event_by_id(event_id)

        if not event:
            await query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        from utils.keyboard_utils import create_back_to_admin_keyboard

        await query.edit_message_text(
            f"üì¢ *–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n"
            f"üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event[0]}\n"
            f"üìÖ –î–∞—Ç–∞: {event[2]}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
            f'üí° –ü—Ä–∏–º–µ—Ä: "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å –Ω–æ—É—Ç–±—É–∫!"\n\n'
            f"–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=create_back_to_admin_keyboard(),
        )

    async def handle_event_creation_step(self, query):
        """Handle individual steps of event creation"""
        user_id = query.from_user.id

        # Check if user is admin
        if not config.is_admin(user_id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        # Initialize user_data if it doesn't exist
        if user_id not in self.bot.user_data:
            self.bot.user_data[user_id] = {}

        logger.info(f"Event creation step: {query.data} for user {user_id}")

        if query.data == "create_title":
            logger.info(f"Setting up title input for user {user_id}")
            self.bot.user_data[user_id]["creating_event"] = True
            self.bot.user_data[user_id]["waiting_for"] = "title"
            logger.info(f"User data for {user_id}: {self.bot.user_data[user_id]}")
            await query.edit_message_text(
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n\n"
                "–ü—Ä–∏–º–µ—Ä: –ö–æ–º–∞–Ω–¥–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞\n\n"
                "üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )

        elif query.data == "create_date":
            self.bot.user_data[user_id]["creating_event"] = True
            self.bot.user_data[user_id]["waiting_for"] = "date"
            await query.edit_message_text(
                "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.\n\n"
                "–ü—Ä–∏–º–µ—Ä: 2024-12-25\n\n"
                "üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )

        elif query.data == "create_description":
            self.bot.user_data[user_id]["creating_event"] = True
            self.bot.user_data[user_id]["waiting_for"] = "description"
            await query.edit_message_text(
                "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
                "–ü—Ä–∏–º–µ—Ä: –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã\n\n"
                "üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )

        elif query.data == "create_limit":
            self.bot.user_data[user_id]["creating_event"] = True
            self.bot.user_data[user_id]["waiting_for"] = "attendee_limit"
            from utils.keyboard_utils import create_back_to_admin_keyboard

            await query.edit_message_text(
                "üë• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∏—Å–ª–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50).\n\n"
                "–ü—Ä–∏–º–µ—Ä: 25\n\n"
                "üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0 –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞.\n"
                "–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª–∏–º–∏—Ç, –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'.",
                reply_markup=create_back_to_admin_keyboard(),
            )

        elif query.data == "create_image":
            self.bot.user_data[user_id]["creating_event"] = True
            self.bot.user_data[user_id]["waiting_for"] = "event_image"
            from utils.keyboard_utils import create_back_to_admin_keyboard

            await query.edit_message_text(
                "üñºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é.\n\n"
                "üí° –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n"
                "–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'.\n\n"
                "–ü–æ—Å–ª–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
                reply_markup=create_back_to_admin_keyboard(),
            )

        elif query.data == "remove_image":
            # Remove the attached image
            if (
                user_id in self.bot.user_data
                and "event_image_file_id" in self.bot.user_data[user_id]
            ):
                del self.bot.user_data[user_id]["event_image_file_id"]

            # Show updated status with new keyboard
            user_data = self.bot.user_data.get(user_id, {})
            status_text = format_event_creation_status(user_data)
            reply_markup = create_event_creation_keyboard(user_data)

            await query.edit_message_text(
                status_text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
            await query.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")

        elif query.data == "create_final":
            await self.create_event_from_dialogue(query)
        elif query.data == "create_clear":
            await self.clear_event_creation_data(query)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {query.data}")
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def create_event_from_dialogue(self, query):
        """Create event using the dialogue data"""
        user_id = query.from_user.id

        # Get stored event data
        user_data = self.bot.user_data.get(user_id, {})

        title = user_data.get("event_title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        event_date = user_data.get("event_date", datetime.now().strftime("%Y-%m-%d"))
        description = user_data.get("event_description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
        attendee_limit = user_data.get("attendee_limit")
        image_file_id = user_data.get("event_image_file_id")

        # Validate that we have at least a title
        if not title or title == "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è":
            await query.edit_message_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è."
            )
            return

        try:
            event_id = db.create_event(
                title, description, event_date, attendee_limit, image_file_id
            )

            # Clear the creation data
            if user_id in self.bot.user_data:
                self.bot.user_data[user_id].clear()

            # Format success message
            success_message = f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            success_message += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            success_message += f"üìÖ –î–∞—Ç–∞: {event_date}\n"
            success_message += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"

            if attendee_limit is not None:
                success_message += f"üë• –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {attendee_limit}\n"
            else:
                success_message += f"üë• –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: –ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n"

            if image_file_id:
                success_message += f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"

            success_message += f"\nID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_id}"

            from utils.keyboard_utils import create_back_to_admin_keyboard

            await query.edit_message_text(
                success_message, reply_markup=create_back_to_admin_keyboard()
            )

        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {str(e)}")

    async def clear_event_creation_data(self, query):
        """Clear event creation data for user"""
        user_id = query.from_user.id

        if user_id in self.bot.user_data:
            self.bot.user_data[user_id].clear()

        from utils.keyboard_utils import create_back_to_admin_keyboard

        await query.edit_message_text(
            "üóëÔ∏è –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—á–∏—â–µ–Ω—ã!\n\n"
            "–í—Å–µ –ø–æ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
            reply_markup=create_back_to_admin_keyboard(),
        )

    async def handle_edit_event_selection(self, query):
        """Handle event selection for editing"""
        if not config.is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        event_id = int(query.data.split("_")[2])
        event = db.get_event_by_id(event_id)

        if not event:
            await query.edit_message_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ.")
            return

        # Store the selected event for editing
        user_id = query.from_user.id
        if user_id not in self.bot.user_data:
            self.bot.user_data[user_id] = {}

        # Store original event data and mark as editing
        self.bot.user_data[user_id]["editing_event_id"] = event_id
        self.bot.user_data[user_id]["editing_event"] = True
        self.bot.user_data[user_id]["original_event"] = {
            "title": event[0],
            "description": event[1],
            "event_date": event[2],
            "attendee_limit": event[3],
            "image_file_id": event[4] if len(event) > 4 else None,
        }

        # Format current status with original data
        user_data = self.bot.user_data.get(user_id, {})
        status_text = format_event_edit_status(
            user_data, self.bot.user_data[user_id]["original_event"]
        )
        reply_markup = create_event_edit_keyboard(user_data)

        await query.edit_message_text(
            status_text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )
        await query.answer("‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤—ã–±—Ä–∞–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")

    async def handle_event_edit_step(self, query):
        """Handle individual steps of event editing"""
        user_id = query.from_user.id

        # Check if user is admin
        if not config.is_admin(user_id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        # Initialize user_data if it doesn't exist
        if user_id not in self.bot.user_data:
            self.bot.user_data[user_id] = {}

        logger.info(f"Event edit step: {query.data} for user {user_id}")

        if query.data == "edit_title":
            logger.info(f"Setting up title edit for user {user_id}")
            self.bot.user_data[user_id]["waiting_for"] = "edit_title"
            await query.edit_message_text(
                "üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º.\n\n"
                "–ü—Ä–∏–º–µ—Ä: –ö–æ–º–∞–Ω–¥–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞\n\n"
                "üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )

        elif query.data == "edit_date":
            self.bot.user_data[user_id]["waiting_for"] = "edit_date"
            await query.edit_message_text(
                "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.\n\n"
                "–ü—Ä–∏–º–µ—Ä: 2024-12-25\n\n"
                "üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )

        elif query.data == "edit_description":
            self.bot.user_data[user_id]["waiting_for"] = "edit_description"
            await query.edit_message_text(
                "üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
                "–ü—Ä–∏–º–µ—Ä: –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã\n\n"
                "üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )

        elif query.data == "edit_limit":
            self.bot.user_data[user_id]["waiting_for"] = "edit_attendee_limit"
            from utils.keyboard_utils import create_back_to_admin_keyboard

            await query.edit_message_text(
                "üë• –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —á–∏—Å–ª–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50).\n\n"
                "–ü—Ä–∏–º–µ—Ä: 25\n\n"
                "üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0 –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞.\n"
                "–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å –ª–∏–º–∏—Ç, –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'.",
                reply_markup=create_back_to_admin_keyboard(),
            )

        elif query.data == "edit_image":
            self.bot.user_data[user_id]["waiting_for"] = "edit_event_image"
            from utils.keyboard_utils import create_back_to_admin_keyboard

            await query.edit_message_text(
                "üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é.\n\n"
                "üí° –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n"
                "–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –º–µ–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'.\n\n"
                "–ü–æ—Å–ª–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
                reply_markup=create_back_to_admin_keyboard(),
            )

        elif query.data == "edit_remove_image":
            # Remove the attached image
            if (
                user_id in self.bot.user_data
                and "event_image_file_id" in self.bot.user_data[user_id]
            ):
                del self.bot.user_data[user_id]["event_image_file_id"]

            # Show updated status with new keyboard
            user_data = self.bot.user_data.get(user_id, {})
            original_event = self.bot.user_data.get(user_id, {}).get(
                "original_event", {}
            )
            status_text = format_event_edit_status(user_data, original_event)
            reply_markup = create_event_edit_keyboard(user_data)

            await query.edit_message_text(
                status_text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )
            await query.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")

        elif query.data == "edit_final":
            await self.save_event_edits(query)
        elif query.data == "edit_clear":
            await self.clear_event_edit_data(query)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {query.data}")
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def save_event_edits(self, query):
        """Save event edits to database"""
        user_id = query.from_user.id

        # Get stored event data
        user_data = self.bot.user_data.get(user_id, {})
        event_id = user_data.get("editing_event_id")

        if not event_id:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            )
            return

        # Get the changes (only non-None values)
        title = user_data.get("event_title")
        event_date = user_data.get("event_date")
        description = user_data.get("event_description")
        attendee_limit = user_data.get("attendee_limit")
        image_file_id = user_data.get("event_image_file_id")

        # Update event in database
        success = db.update_event(
            event_id=event_id,
            title=title,
            description=description,
            event_date=event_date,
            attendee_limit=attendee_limit,
            image_file_id=image_file_id,
        )

        if success:
            # Clear the edit data
            if user_id in self.bot.user_data:
                self.bot.user_data[user_id].clear()

            from utils.keyboard_utils import create_back_to_admin_keyboard

            await query.edit_message_text(
                "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ID: {event_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
                reply_markup=create_back_to_admin_keyboard(),
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

    async def clear_event_edit_data(self, query):
        """Clear event edit data for user"""
        user_id = query.from_user.id

        if user_id in self.bot.user_data:
            # Remove only edit-related data, keep original event data for display
            edit_keys = [
                key
                for key in self.bot.user_data[user_id].keys()
                if key.startswith(("event_", "waiting_for", "editing_"))
                and key != "original_event"
            ]
            for key in edit_keys:
                del self.bot.user_data[user_id][key]

        # Show updated status with cleared data
        user_data = self.bot.user_data.get(user_id, {})
        original_event = self.bot.user_data.get(user_id, {}).get("original_event", {})
        status_text = format_event_edit_status(user_data, original_event)
        from utils.keyboard_utils import create_back_to_admin_keyboard

        await query.edit_message_text(
            status_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=create_back_to_admin_keyboard(),
        )
