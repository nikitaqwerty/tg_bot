import logging
from datetime import datetime

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from config import config
from database import db
from utils.keyboard_utils import (
    create_admin_menu_keyboard,
    create_back_to_admin_keyboard,
    create_event_creation_keyboard,
    create_event_edit_selection_keyboard,
    create_event_selection_keyboard,
    create_notification_keyboard,
)
from utils.message_utils import (
    format_admin_events_list,
    format_event_creation_status,
    format_event_users_list,
    format_registrations_list,
    format_rsvp_stats,
    format_user_status_report,
)

logger = logging.getLogger(__name__)


class AdminHandlers:
    """Admin command and callback handlers"""

    def __init__(self, bot_instance):
        self.bot = bot_instance

    def is_admin(self, user_id: int) -> bool:
        """Check if user is admin"""
        return config.is_admin(user_id)

    async def admin_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Admin menu command handler"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
            )
            return

        reply_markup = create_admin_menu_keyboard()
        await update.message.reply_text(
            "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
        )

    async def create_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Create new event command - Admin only"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        if len(context.args) < 3:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_event <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–¥–∞—Ç–∞:–ì–ì–ì–ì-–ú–ú-–î–î> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n"
                "–ü—Ä–∏–º–µ—Ä: /create_event '–ö–æ–º–∞–Ω–¥–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞' 2024-12-25 '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã'\n\n"
                "üí° –°–æ–≤–µ—Ç: –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –∫–æ–º–∞–Ω–¥–æ–π, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é!"
            )
            return

        title = context.args[0]
        event_date = context.args[1]
        description = " ".join(context.args[2:])

        # Check for attached image
        image_file_id = None
        if update.message.photo:
            # Get the highest resolution photo
            image_file_id = update.message.photo[-1].file_id

        try:
            # Validate date format
            datetime.strptime(event_date, "%Y-%m-%d")

            # Create event with optional image
            event_id = db.create_event(
                title, description, event_date, None, image_file_id
            )

            # Post event in the current chat with registration button
            await self._post_event_in_chat(
                update, event_id, title, description, event_date, image_file_id
            )

            success_message = f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!"
            if image_file_id:
                success_message += "\nüñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é!"

            await update.message.reply_text(
                success_message, reply_markup=create_back_to_admin_keyboard()
            )

        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î"
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {str(e)}")

    async def _post_event_in_chat(
        self,
        update: Update,
        event_id: int,
        title: str,
        description: str,
        event_date: str,
        image_file_id: str = None,
    ):
        """Post event in the current chat with registration button"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup

        keyboard = [
            [
                InlineKeyboardButton(
                    "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"register_{event_id}"
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Get attendee limit and image for the event
        event = db.get_event_by_id(event_id)
        attendee_limit = event[3] if event and len(event) > 3 else None
        event_image_file_id = image_file_id or (
            event[4] if event and len(event) > 4 else None
        )

        # Format message with attendee limit info
        from utils.message_utils import format_simple_event_message

        message = format_simple_event_message(
            title, description, event_date, attendee_limit
        )

        # Send message with or without image
        if event_image_file_id:
            await update.message.reply_photo(
                photo=event_image_file_id,
                caption=message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup,
            )
        else:
            await update.message.reply_text(
                text=message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
            )

    async def list_events(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """List all events - Admin only"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        events = db.get_all_events()
        text = format_admin_events_list(events)
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=create_back_to_admin_keyboard(),
        )

    async def event_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """List users registered for specific event - Admin only"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /event_users <event_id>")
            return

        try:
            event_id = int(context.args[0])
            event = db.get_event_by_id(event_id)

            if not event:
                await update.message.reply_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            users = db.get_event_registrations(event_id)
            text = format_event_users_list(event[0], event[2], users)
            await update.message.reply_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=create_back_to_admin_keyboard(),
            )

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")

    async def notify_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Send notification to all registered users - Admin only"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        if len(context.args) < 2:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notify_users <event_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>"
            )
            return

        try:
            event_id = int(context.args[0])
            message = " ".join(context.args[1:])

            event = db.get_event_by_id(event_id)
            if not event:
                await update.message.reply_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            user_ids = db.get_registered_users_for_event(event_id)
            if not user_ids:
                await update.message.reply_text(
                    "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
                )
                return

            # Send notifications
            notification_text = f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏*\n\nüìÖ {event[0]} - {event[2]}\n\n{message}"

            sent_count = 0
            failed_count = 0
            blocked_users = []

            for user_id in user_ids:
                try:
                    await self.bot.application.bot.send_message(
                        chat_id=user_id,
                        text=notification_text,
                        parse_mode=ParseMode.MARKDOWN,
                    )
                    sent_count += 1
                except Exception as e:
                    error_msg = str(e)
                    logger.error(f"Failed to send notification to user {user_id}: {e}")
                    failed_count += 1

                    if "bot can't initiate conversation" in error_msg.lower():
                        blocked_users.append(user_id)

            from utils.message_utils import format_notification_status

            status_message = format_notification_status(
                sent_count, len(user_ids), failed_count, blocked_users
            )
            await update.message.reply_text(
                status_message, reply_markup=create_back_to_admin_keyboard()
            )

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")

    async def post_event_card(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Post event card with RSVP buttons in the configured channel - Admin only"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        if not context.args:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post_event_card <event_id>"
            )
            return

        # Check if channel is configured
        if not config.CHANNEL_ID:
            await update.message.reply_text(
                "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è CHANNEL_ID."
            )
            return

        try:
            event_id = int(context.args[0])
            event = db.get_event_by_id(event_id)

            if not event:
                await update.message.reply_text(
                    "‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ."
                )
                return

            title, description, event_date = event[:3]
            attendee_limit = event[3] if len(event) > 3 else None
            image_file_id = event[4] if len(event) > 4 else None

            # Create RSVP keyboard and message
            from utils.keyboard_utils import create_rsvp_keyboard
            from utils.message_utils import format_event_card_message

            reply_markup = create_rsvp_keyboard(event_id)
            message = format_event_card_message(
                event_id, title, description, event_date, attendee_limit
            )

            try:
                # Post to the configured channel
                if image_file_id:
                    await context.bot.send_photo(
                        chat_id=config.CHANNEL_ID,
                        photo=image_file_id,
                        caption=message,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup,
                    )
                else:
                    await context.bot.send_message(
                        chat_id=config.CHANNEL_ID,
                        text=message,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup,
                    )

                # Send confirmation message to admin
                await update.message.reply_text(
                    f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '{title}' —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!",
                    reply_markup=create_back_to_admin_keyboard(),
                )

            except Exception as e:
                logger.error(
                    f"Failed to post event card to channel {config.CHANNEL_ID}: {e}"
                )
                error_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª. "

                if "chat not found" in str(e).lower():
                    error_message += (
                        f"–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {config.CHANNEL_ID}).\n\n"
                        "üîß –†–µ—à–µ–Ω–∏—è:\n"
                        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/test_channel` –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n"
                        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ @userinfobot –≤ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID\n"
                        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª"
                    )
                elif (
                    "not enough rights" in str(e).lower()
                    or "forbidden" in str(e).lower()
                ):
                    error_message += (
                        "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª.\n\n"
                        "üîß –†–µ—à–µ–Ω–∏–µ:\n"
                        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                        "‚Ä¢ –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π' –∏ '–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞'\n"
                        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/test_channel` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
                    )
                else:
                    error_message += f"–î–µ—Ç–∞–ª–∏: {str(e)}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/test_channel` –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."

                await update.message.reply_text(
                    error_message,
                    reply_markup=create_back_to_admin_keyboard(),
                )

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")

    async def test_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Test channel connection and provide setup instructions - Admin only"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        if not config.CHANNEL_ID:
            await update.message.reply_text(
                "‚ùå CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
                "üìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–Ω–∞–ª–∞:**\n\n"
                "1. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª –≤ Telegram\n"
                "2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª\n"
                "4. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É @userinfobot\n"
                "5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Chat ID –∏–∑ –æ—Ç–≤–µ—Ç–∞\n"
                "6. –î–æ–±–∞–≤—å—Ç–µ –≤ .env: `CHANNEL_ID=-1001234567890`\n"
                "7. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=create_back_to_admin_keyboard(),
            )
            return

        try:
            # Test sending a message to the channel
            test_message = await context.bot.send_message(
                chat_id=config.CHANNEL_ID,
                text="üîß –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É —É—Å–ø–µ—à–µ–Ω! –≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª.",
            )

            await update.message.reply_text(
                f"‚úÖ **–ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n"
                f"üìç Channel ID: `{config.CHANNEL_ID}`\n"
                f"‚úâÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: {test_message.message_id})\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/post_event_card <event_id>` –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=create_back_to_admin_keyboard(),
            )

        except Exception as e:
            error_details = str(e).lower()

            if "chat not found" in error_details:
                error_message = (
                    "‚ùå **–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
                    f"Current CHANNEL_ID: `{config.CHANNEL_ID}`\n\n"
                    "üîß **–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:**\n"
                    "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å CHANNEL_ID\n"
                    "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                    "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª\n\n"
                    "üìù **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Channel ID:**\n"
                    "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @userinfobot –≤ –∫–∞–Ω–∞–ª\n"
                    "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª\n"
                    "3. @userinfobot –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Chat ID\n"
                    "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –≤ .env —Ñ–∞–π–ª–µ"
                )
            elif "forbidden" in error_details or "not enough rights" in error_details:
                error_message = (
                    "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤**\n\n"
                    f"Current CHANNEL_ID: `{config.CHANNEL_ID}`\n\n"
                    "üîß **–†–µ—à–µ–Ω–∏–µ:**\n"
                    "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                    "2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º ‚Üí –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã\n"
                    "3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                    "4. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π' –∏ '–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞'\n"
                    "5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
                )
            else:
                error_message = (
                    f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É**\n\n"
                    f"Current CHANNEL_ID: `{config.CHANNEL_ID}`\n"
                    f"Error: `{str(e)}`\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã."
                )

            await update.message.reply_text(
                error_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=create_back_to_admin_keyboard(),
            )

    async def show_rsvp_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show RSVP statistics for a specific event - Admin only"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rsvp_stats <event_id>")
            return

        try:
            event_id = int(context.args[0])
            event = db.get_event_by_id(event_id)

            if not event:
                await update.message.reply_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            stats = db.get_rsvp_stats(event_id)
            text = format_rsvp_stats(event[0], event[2], stats)
            await update.message.reply_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=create_back_to_admin_keyboard(),
            )

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")

    async def check_user_status(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """Check which users haven't started conversations with the bot - Admin only"""
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_users <event_id>")
            return

        try:
            event_id = int(context.args[0])
            event = db.get_event_by_id(event_id)

            if not event:
                await update.message.reply_text("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # Get registered users and test message sending
            user_ids = db.get_registered_users_for_event(event_id)
            if not user_ids:
                await update.message.reply_text(
                    "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
                )
                return

            test_message = "üîç –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
            reachable_users = []
            unreachable_users = []

            for user_id in user_ids:
                try:
                    await self.bot.application.bot.send_message(
                        chat_id=user_id, text=test_message
                    )
                    reachable_users.append(
                        (user_id, None, None)
                    )  # Simplified for this example
                except Exception as e:
                    error_msg = str(e)
                    if "bot can't initiate conversation" in error_msg.lower():
                        unreachable_users.append((user_id, None, None))

            report = format_user_status_report(
                event[0], event[2], reachable_users, unreachable_users
            )
            await update.message.reply_text(
                report,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=create_back_to_admin_keyboard(),
            )

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")

    # Callback handlers for admin menu
    async def handle_admin_callback(self, query):
        """Handle admin callbacks"""
        if not self.is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        logger.info(f"Admin callback: {query.data} from user {query.from_user.id}")

        if query.data == "admin_create":
            await self.start_event_creation(query)
        elif query.data == "admin_edit":
            await self.show_edit_menu(query)
        elif query.data == "admin_list":
            await self.show_admin_events(query)
        elif query.data == "admin_registrations":
            await self.show_registrations(query)
        elif query.data == "admin_post_card":
            await self.show_post_card_menu(query)
        elif query.data == "admin_rsvp_stats":
            await self.show_rsvp_stats_menu(query)
        elif query.data == "admin_check_users":
            await self.show_check_users_menu(query)
        elif query.data == "admin_notify":
            await self.show_notify_menu(query)
        elif query.data == "admin_test_channel":
            await self.show_test_channel_result(query)
        elif query.data == "admin_change_channel":
            await self.show_change_channel_menu(query)
        elif query.data == "admin_back":
            await self.handle_admin_back_with_auto_save(query)

    async def start_event_creation(self, query):
        """Start the event creation dialogue"""
        user_id = query.from_user.id
        user_data = self.bot.user_data.get(user_id, {})

        status_text = format_event_creation_status(user_data)
        reply_markup = create_event_creation_keyboard(user_data)

        await query.edit_message_text(
            status_text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )

    async def show_admin_events(self, query):
        """Show events for admin"""
        events = db.get_all_events()
        text = format_admin_events_list(events)
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=create_back_to_admin_keyboard(),
        )

    async def show_registrations(self, query):
        """Show registrations for admin"""
        events = db.get_events_with_registration_counts()
        text = format_registrations_list(events)
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=create_back_to_admin_keyboard(),
        )

    async def show_post_card_menu(self, query):
        """Show menu for posting event cards"""
        events = db.get_active_events()
        if not events:
            await query.edit_message_text(
                "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return

        # Extract event_id, title, event_date from events
        event_data = [(event[0], event[1], event[2]) for event in events]
        reply_markup = create_event_selection_keyboard(event_data, "post_card")

        await query.edit_message_text(
            "üé´ *–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ RSVP –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup,
        )

    async def show_rsvp_stats_menu(self, query):
        """Show menu for viewing RSVP statistics"""
        events = db.get_active_events()
        if not events:
            await query.edit_message_text(
                "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return

        event_data = [(event[0], event[1], event[2]) for event in events]
        reply_markup = create_event_selection_keyboard(event_data, "view_stats")

        await query.edit_message_text(
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RSVP*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ RSVP:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup,
        )

    async def show_check_users_menu(self, query):
        """Show menu for checking user status"""
        events = db.get_active_events()
        if not events:
            await query.edit_message_text(
                "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return

        event_data = [(event[0], event[1], event[2]) for event in events]
        reply_markup = create_event_selection_keyboard(event_data, "check_users")

        await query.edit_message_text(
            "üîç *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup,
        )

    async def show_edit_menu(self, query):
        """Show event selection menu for editing"""
        if not self.is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        events = db.get_active_events()
        if not events:
            await query.edit_message_text(
                "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return

        # Extract event_id, title, event_date from events
        event_data = [(event[0], event[1], event[2]) for event in events]
        reply_markup = create_event_edit_selection_keyboard(event_data)

        await query.edit_message_text(
            "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup,
        )

    async def show_notify_menu(self, query):
        """Show notification menu with event selection"""
        if not self.is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå Access denied.")
            return

        events = db.get_active_events_for_notification()
        if not events:
            await query.edit_message_text(
                "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=create_back_to_admin_keyboard(),
            )
            return

        reply_markup = create_notification_keyboard(events)

        await query.edit_message_text(
            "üì¢ *–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup,
        )

    async def show_test_channel_result(self, query):
        """Show channel test result through callback"""
        if not self.is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        if not config.CHANNEL_ID:
            await query.edit_message_text(
                "‚ùå CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n"
                "üìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–Ω–∞–ª–∞:**\n\n"
                "1. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞–Ω–∞–ª –≤ Telegram\n"
                "2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª\n"
                "4. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É @userinfobot\n"
                "5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Chat ID –∏–∑ –æ—Ç–≤–µ—Ç–∞\n"
                "6. –î–æ–±–∞–≤—å—Ç–µ –≤ .env: `CHANNEL_ID=-1001234567890`\n"
                "7. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=create_back_to_admin_keyboard(),
            )
            return

        try:
            # Test sending a message to the channel
            test_message = await self.bot.application.bot.send_message(
                chat_id=config.CHANNEL_ID,
                text="üîß –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É —É—Å–ø–µ—à–µ–Ω! –≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª.",
            )

            await query.edit_message_text(
                f"‚úÖ **–ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n"
                f"üìç Channel ID: `{config.CHANNEL_ID}`\n"
                f"‚úâÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: {test_message.message_id})\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/post_event_card <event_id>` –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=create_back_to_admin_keyboard(),
            )

        except Exception as e:
            error_details = str(e).lower()

            if "chat not found" in error_details:
                error_message = (
                    "‚ùå **–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
                    f"Current CHANNEL_ID: `{config.CHANNEL_ID}`\n\n"
                    "üîß **–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:**\n"
                    "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å CHANNEL_ID\n"
                    "2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                    "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª\n\n"
                    "üìù **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Channel ID:**\n"
                    "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @userinfobot –≤ –∫–∞–Ω–∞–ª\n"
                    "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª\n"
                    "3. @userinfobot –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Chat ID\n"
                    "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç ID –≤ .env —Ñ–∞–π–ª–µ"
                )
            elif "forbidden" in error_details or "not enough rights" in error_details:
                error_message = (
                    "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤**\n\n"
                    f"Current CHANNEL_ID: `{config.CHANNEL_ID}`\n\n"
                    "üîß **–†–µ—à–µ–Ω–∏–µ:**\n"
                    "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                    "2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º ‚Üí –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã\n"
                    "3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                    "4. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞: '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π' –∏ '–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞'\n"
                    "5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
                )
            else:
                error_message = (
                    f"‚ùå **–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É**\n\n"
                    f"Current CHANNEL_ID: `{config.CHANNEL_ID}`\n"
                    f"Error: `{str(e)}`\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã."
                )

            await query.edit_message_text(
                error_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=create_back_to_admin_keyboard(),
            )

    async def handle_admin_back_with_auto_save(self, query):
        """Handle admin back with auto-save functionality"""
        user_id = query.from_user.id

        # Clear any waiting states
        if user_id in self.bot.user_data:
            self.bot.user_data[user_id]["waiting_for_channel_id"] = False

        # Check if user has unsaved changes and auto-save them
        if user_id in self.bot.user_data and self.bot.user_data[user_id].get(
            "editing_event"
        ):
            user_data = self.bot.user_data[user_id]
            event_id = user_data.get("editing_event_id")

            if event_id and self._has_unsaved_changes(user_id, event_id):
                # Auto-save the changes
                success = self._auto_save_event_changes(user_id, event_id)

                if success:
                    logger.info(
                        f"Auto-saved changes for event {event_id} by user {user_id}"
                    )
                    # Clear the edit data after successful auto-save
                    self.bot.user_data[user_id].clear()

                    # Show confirmation message briefly before showing admin menu
                    await query.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

                    # Wait a moment before showing the admin menu
                    import asyncio

                    await asyncio.sleep(1)
                else:
                    logger.error(
                        f"Failed to auto-save changes for event {event_id} by user {user_id}"
                    )
                    await query.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")

        # Show admin menu
        await self.admin_menu_from_callback(query)

    def _has_unsaved_changes(self, user_id: int, event_id: int) -> bool:
        """Check if user has unsaved changes for the specified event"""
        if user_id not in self.bot.user_data:
            return False

        user_data = self.bot.user_data[user_id]

        # Check if user is currently editing this event
        if (
            user_data.get("editing_event")
            and user_data.get("editing_event_id") == event_id
        ):

            # Check if there are any pending changes
            pending_changes = [
                user_data.get("event_title"),
                user_data.get("event_date"),
                user_data.get("event_description"),
                user_data.get("attendee_limit"),
                user_data.get("event_image_file_id"),
            ]

            return any(change is not None for change in pending_changes)

        return False

    def _auto_save_event_changes(self, user_id: int, event_id: int) -> bool:
        """Auto-save event changes to database"""
        if user_id not in self.bot.user_data:
            return False

        user_data = self.bot.user_data[user_id]

        if (
            not user_data.get("editing_event")
            or user_data.get("editing_event_id") != event_id
        ):
            return False

        # Get the changes (only non-None values)
        title = user_data.get("event_title")
        event_date = user_data.get("event_date")
        description = user_data.get("event_description")
        attendee_limit = user_data.get("attendee_limit")
        image_file_id = user_data.get("event_image_file_id")

        # Update event in database
        success = db.update_event(
            event_id=event_id,
            title=title,
            description=description,
            event_date=event_date,
            attendee_limit=attendee_limit,
            image_file_id=image_file_id,
        )

        return success

    async def admin_menu_from_callback(self, query):
        """Show admin menu from callback query"""
        reply_markup = create_admin_menu_keyboard()
        await query.edit_message_text(
            "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
        )

    async def show_change_channel_menu(self, query):
        """Show menu for changing channel ID"""
        current_channel = config.CHANNEL_ID or "–ù–µ –∑–∞–¥–∞–Ω"
        await query.edit_message_text(
            f"üìç *–ò–∑–º–µ–Ω–µ–Ω–∏–µ Channel ID*\n\n"
            f"–¢–µ–∫—É—â–∏–π Channel ID: `{current_channel}`\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π Channel ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            f"‚Ä¢ `@channelusername` (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)\n"
            f"‚Ä¢ `-1001234567890` (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)\n\n"
            f"üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Channel ID:\n"
            f"1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @userinfobot –≤ –∫–∞–Ω–∞–ª\n"
            f"2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª\n"
            f"3. @userinfobot –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Chat ID",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=create_back_to_admin_keyboard(),
        )

        # Set user state to expect channel ID input
        user_id = query.from_user.id
        if user_id not in self.bot.user_data:
            self.bot.user_data[user_id] = {}
        self.bot.user_data[user_id]["waiting_for_channel_id"] = True
